name: 🚀 Continuous Deployment

on:
  push:
    branches:
      - main        # Production deployment
      - develop     # Staging deployment
  workflow_run:
    workflows: ["🔍 Continuous Integration"]
    types: [completed]
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: 'jobtrack-app'

jobs:
  # Job 1: Determine Environment
  setup:
    name: 🎯 Setup Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      project-id: ${{ steps.env.outputs.project-id }}
      deploy-message: ${{ steps.env.outputs.deploy-message }}
      
    steps:
    - name: 🎯 Determine Environment
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "project-id=jobtrack-app" >> $GITHUB_OUTPUT
          echo "deploy-message=🚀 Production Deployment" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "project-id=jobtrack-app-staging" >> $GITHUB_OUTPUT
          echo "deploy-message=🧪 Staging Deployment" >> $GITHUB_OUTPUT
        else
          echo "environment=review" >> $GITHUB_OUTPUT
          echo "project-id=jobtrack-app-preview" >> $GITHUB_OUTPUT
          echo "deploy-message=👀 Preview Deployment" >> $GITHUB_OUTPUT
        fi

  # Job 2: Pre-deployment Checks
  pre-deploy:
    name: ✅ Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔥 Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: 🔐 Authenticate Firebase
      run: echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci --token-stdin
      
    - name: ✅ Verify Project Access
      run: firebase projects:list
      
    - name: 📋 Check Deployment Requirements
      run: |
        echo "Deployment Environment: ${{ needs.setup.outputs.environment }}"
        echo "Project ID: ${{ needs.setup.outputs.project-id }}"
        echo "Deploying from branch: ${{ github.ref }}"

  # Job 3: Build for Deployment
  build-deploy:
    name: 🏗️ Build for Deployment
    runs-on: ubuntu-latest
    needs: [setup, pre-deploy]
    environment: ${{ needs.setup.outputs.environment }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        npm ci
        cd functions && npm ci
        cd ../frontend && npm ci --legacy-peer-deps
        
    - name: 🔧 Setup Environment Variables
      working-directory: ./functions
      run: |
        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" > .env
        echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
        echo "REDIRECT_URI=${{ secrets.REDIRECT_URI }}" >> .env
        
    - name: 🏗️ Build Functions
      working-directory: ./functions
      run: npm run build || echo "No build script available"
      
    - name: 🏗️ Build Frontend
      working-directory: ./frontend
      run: npm run build
      env:
        REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
        REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
        REACT_APP_FIREBASE_PROJECT_ID: ${{ needs.setup.outputs.project-id }}
        REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
        REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
        REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
        
    - name: 📦 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deploy-artifacts-${{ needs.setup.outputs.environment }}
        path: |
          frontend/build/
          functions/
          firebase.json
          firestore.rules
          firestore.indexes.json
          .firebaserc
        retention-days: 30

  # Job 4: Deploy Functions
  deploy-functions:
    name: ⚡ Deploy Functions
    runs-on: ubuntu-latest
    needs: [setup, build-deploy]
    environment: ${{ needs.setup.outputs.environment }}
    
    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: deploy-artifacts-${{ needs.setup.outputs.environment }}
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 🔥 Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: 🔐 Authenticate Firebase
      run: echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci --token-stdin
      
    - name: ⚡ Deploy Functions
      run: |
        firebase use ${{ needs.setup.outputs.project-id }}
        firebase deploy --only functions --force
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        
    - name: ✅ Verify Functions Deployment
      run: |
        echo "✅ Functions deployed successfully to ${{ needs.setup.outputs.environment }}"
        firebase functions:list

  # Job 5: Deploy Firestore Rules
  deploy-firestore:
    name: 🗄️ Deploy Firestore Rules
    runs-on: ubuntu-latest
    needs: [setup, build-deploy]
    environment: ${{ needs.setup.outputs.environment }}
    
    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: deploy-artifacts-${{ needs.setup.outputs.environment }}
        
    - name: 🔥 Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: 🔐 Authenticate Firebase
      run: echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci --token-stdin
      
    - name: 🗄️ Deploy Firestore Rules
      run: |
        firebase use ${{ needs.setup.outputs.project-id }}
        firebase deploy --only firestore:rules,firestore:indexes
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        
    - name: ✅ Verify Firestore Deployment
      run: echo "✅ Firestore rules deployed successfully"

  # Job 6: Deploy Frontend
  deploy-hosting:
    name: 🌐 Deploy Frontend
    runs-on: ubuntu-latest
    needs: [setup, build-deploy, deploy-functions]
    environment: ${{ needs.setup.outputs.environment }}
    
    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: deploy-artifacts-${{ needs.setup.outputs.environment }}
        
    - name: 🔥 Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: 🔐 Authenticate Firebase
      run: echo "${{ secrets.FIREBASE_TOKEN }}" | firebase login:ci --token-stdin
      
    - name: 🌐 Deploy Frontend
      run: |
        firebase use ${{ needs.setup.outputs.project-id }}
        firebase deploy --only hosting
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        
    - name: 🔗 Get Hosting URL
      id: hosting-url
      run: |
        URL=$(firebase hosting:sites:list --json | jq -r '.[0].defaultDomain')
        echo "url=https://$URL" >> $GITHUB_OUTPUT
        echo "🌐 Frontend deployed to: https://$URL"
        
    - name: 📊 Update Deployment Status
      run: |
        echo "### 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend URL**: ${{ steps.hosting-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Job 7: Post-deployment Tests
  post-deploy-tests:
    name: 🧪 Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [setup, deploy-hosting]
    environment: ${{ needs.setup.outputs.environment }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔗 Health Check
      run: |
        echo "Performing health checks..."
        # Add health check commands here
        curl -f ${{ needs.deploy-hosting.outputs.url }} || exit 1
        
    - name: 🧪 Smoke Tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
        
    - name: 📊 Performance Check
      run: |
        echo "Checking performance..."
        # Add performance check commands here

  # Job 8: Notification
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [setup, deploy-hosting, post-deploy-tests]
    if: always()
    
    steps:
    - name: 📢 Success Notification
      if: needs.post-deploy-tests.result == 'success'
      run: |
        echo "✅ Deployment Successful!"
        echo "${{ needs.setup.outputs.deploy-message }} completed successfully"
        echo "🌐 Application URL: ${{ needs.deploy-hosting.outputs.url }}"
        
    - name: 📢 Failure Notification
      if: failure()
      run: |
        echo "❌ Deployment Failed!"
        echo "Please check the logs for details"
        
    # Optional: Send to Slack, Discord, email, etc.
    - name: 📱 Slack Notification
      if: needs.setup.outputs.environment == 'production'
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          ${{ needs.setup.outputs.deploy-message }}
          Environment: ${{ needs.setup.outputs.environment }}
          Status: ${{ job.status }}
          URL: ${{ needs.deploy-hosting.outputs.url }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Job 9: Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [setup, notify]
    if: always()
    
    steps:
    - name: 🧹 Cleanup Artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: deploy-artifacts-${{ needs.setup.outputs.environment }}
        failOnError: false 