{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getFunctions, connectFunctionsEmulator } from 'firebase/functions';\n\n// Firebase config - actual project configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAIeeqRAqZSKJzFr5GnfgIvpjwfYU9z_OU\",\n  authDomain: \"job-tracker-bd6dc.firebaseapp.com\",\n  projectId: \"job-tracker-bd6dc\",\n  storageBucket: \"job-tracker-bd6dc.firebasestorage.app\",\n  messagingSenderId: \"831968228747\",\n  appId: \"1:831968228747:web:c2e75da41131ded1a12b8e\",\n  measurementId: \"G-X8T9QY9VBJ\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const functions = getFunctions(app);\n\n// Configure Google Auth Provider\nexport const googleProvider = new GoogleAuthProvider();\ngoogleProvider.addScope('https://www.googleapis.com/auth/gmail.readonly');\n\n// Connect to emulators in development\nif (process.env.NODE_ENV === 'development') {\n  // Only connect if not already connected\n  try {\n    connectFunctionsEmulator(functions, 'localhost', 5001);\n  } catch (error) {\n    console.log('Functions emulator already connected or not available');\n  }\n}\nexport default app;","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","getFirestore","getFunctions","connectFunctionsEmulator","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","functions","googleProvider","addScope","process","env","NODE_ENV","error","console","log"],"sources":["C:/Users/siddh/OneDrive/Desktop/Projects/Job_tracker/frontend/src/firebase.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getAuth, GoogleAuthProvider } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getFunctions, connectFunctionsEmulator } from 'firebase/functions';\r\n\r\n// Firebase config - actual project configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAIeeqRAqZSKJzFr5GnfgIvpjwfYU9z_OU\",\r\n  authDomain: \"job-tracker-bd6dc.firebaseapp.com\",\r\n  projectId: \"job-tracker-bd6dc\",\r\n  storageBucket: \"job-tracker-bd6dc.firebasestorage.app\",\r\n  messagingSenderId: \"831968228747\",\r\n  appId: \"1:831968228747:web:c2e75da41131ded1a12b8e\",\r\n  measurementId: \"G-X8T9QY9VBJ\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Initialize Firebase services\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\nexport const functions = getFunctions(app);\r\n\r\n// Configure Google Auth Provider\r\nexport const googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.addScope('https://www.googleapis.com/auth/gmail.readonly');\r\n\r\n// Connect to emulators in development\r\nif (process.env.NODE_ENV === 'development') {\r\n  // Only connect if not already connected\r\n  try {\r\n    connectFunctionsEmulator(functions, 'localhost', 5001);\r\n  } catch (error) {\r\n    console.log('Functions emulator already connected or not available');\r\n  }\r\n}\r\n\r\nexport default app; "],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,kBAAkB,QAAQ,eAAe;AAC3D,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,YAAY,EAAEC,wBAAwB,QAAQ,oBAAoB;;AAE3E;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,mCAAmC;EAC/CC,SAAS,EAAE,mBAAmB;EAC9BC,aAAa,EAAE,uCAAuC;EACtDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGd,aAAa,CAACM,cAAc,CAAC;;AAEzC;AACA,OAAO,MAAMS,IAAI,GAAGd,OAAO,CAACa,GAAG,CAAC;AAChC,OAAO,MAAME,EAAE,GAAGb,YAAY,CAACW,GAAG,CAAC;AACnC,OAAO,MAAMG,SAAS,GAAGb,YAAY,CAACU,GAAG,CAAC;;AAE1C;AACA,OAAO,MAAMI,cAAc,GAAG,IAAIhB,kBAAkB,CAAC,CAAC;AACtDgB,cAAc,CAACC,QAAQ,CAAC,gDAAgD,CAAC;;AAEzE;AACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;EAC1C;EACA,IAAI;IACFjB,wBAAwB,CAACY,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC;EACxD,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;EACtE;AACF;AAEA,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}